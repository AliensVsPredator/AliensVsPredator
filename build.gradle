import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
	id 'fabric-loom' version '1.10.1'
	id 'maven-publish'
	id 'com.diffplug.spotless'
	id 'com.github.ben-manes.versions'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = "${project.archives_base_name}-fabric-${minecraft_version}"
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	// The Maven with the mods source
	maven { url 'https://maven.azuredoom.com/mods' }
	// Needed for Fabric only at the moment
	maven { url "https://maven.terraformersmc.com/releases" }
}

loom {
//	splitEnvironmentSourceSets()

	mods {
		"avp" {
			sourceSet sourceSets.main
//			sourceSet sourceSets.client
		}
	}

}

fabricApi {
	configureDataGeneration()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "mod.azure.azurelib:azurelib-fabric-${project.minecraft_version}:${project.azurelib_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}

	doLast {
		def jsonMinifyStart = System.currentTimeMillis()
		def jsonMinified = 0
		def jsonBytesSaved = 0
		fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
			File file = it
			jsonMinified++
			def oldLength = file.length()
			file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
			jsonBytesSaved += oldLength - file.length()
		}
		println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
	}
}

spotless {
	java {
		eclipse().configFile("$rootDir/eclipse-formatter.xml")
		endWithNewline()
		importOrder("", "java", group.toString(), "\\#")
		leadingTabsToSpaces(4)
		removeUnusedImports()
		trimTrailingWhitespace()
	}
}

tasks.build {
	dependsOn("spotlessApply")
}

tasks.named("dependencyUpdates").configure {
	filterConfigurations {
		it.name.equals("modImplementation")
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}