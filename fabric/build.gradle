plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
    id 'com.diffplug.spotless' version "7.0.0.BETA3"
}

fabricApi {
    configureDataGeneration()
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")

    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }

    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }

        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"

    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modImplementation "mod.azure.azurelib:azurelib-fabric-${minecraft_version}:${azurelib_version}"
}

sourceSets {
    main {
        resources {
            srcDirs += ["../common/generated"]
        }
    }
}

tasks.named("runDatagen") {
    delete("src/main/generated")
    finalizedBy(":common:copyGeneratedResources")
}